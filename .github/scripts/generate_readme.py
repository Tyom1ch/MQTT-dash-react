from google import genai
import subprocess
import os
import re

client = genai.Client()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–≥—É
def get_last_tag():
    try:
        return subprocess.check_output(["git", "describe", "--tags", "--abbrev=0", "HEAD^"]).decode().strip()
    except:
        return ""

def get_current_tag():
    return subprocess.check_output(["git", "describe", "--tags", "--abbrev=0"]).decode().strip()

def get_commits_between(old_tag, new_tag):
    if old_tag:
        return subprocess.check_output(["git", "log", f"{old_tag}..{new_tag}", "--pretty=format:- %s"]).decode()
    else:
        return subprocess.check_output(["git", "log", new_tag, "--pretty=format:- %s"]).decode()

old_tag = get_last_tag()
new_tag = get_current_tag()
commits = get_commits_between(old_tag, new_tag)

prompt = f"""
–ó–≥–µ–Ω–µ—Ä—É–π changelog —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–∏–∂—á–µ, –¥–ª—è —Ç–µ–≥–∞ {new_tag}.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –Ø–∫—â–æ —Ç–µ–≥ –Ω–µ –º–∞—î –∑–º—ñ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–∫–∞–∂–∏, —â–æ –Ω–µ–º–∞—î –∑–º—ñ–Ω.
–ù–µ –≥–æ–≤–æ—Ä–∏ —â–æ—Å—å —Ç–∏–ø—É "–û—Å—å —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω", –ø—Ä–æ—Å—Ç–æ –¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π —è –≤–∫–∞–∑–∞–≤ –Ω–∏–∂—á–µ.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞:

v.v.v - Declarative Widgets & Major Refinements
‚ú® –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (Added)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –Ω–æ–≤–∏—Ö —Ñ—ñ—á>
‚ôªÔ∏è –ó–º—ñ–Ω–∏ (Changed)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –∑–º—ñ–Ω>
üêõ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (Fixed)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –±–∞–≥—Ñ—ñ–∫—Å—ñ–≤>
üßπ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏ (Housekeeping)
<–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–º—ñ—Ç—Ç—è —Ç–æ—â–æ>

–û—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º—ñ—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:
{commits}
"""

response = client.models.generate_content(
    model="gemini-2.5-flash", contents=prompt
)

# –û–Ω–æ–≤–ª—é—î–º–æ README.md
with open("README.md", "r") as f:
    old_content = f.read()

new_changelog = response.text.strip()

# –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–µ–∫—Ü—ñ—é "## –ó–º—ñ–Ω–∏"
pattern = r"(<!-- CHANGELOG START -->)(.*?)(<!-- CHANGELOG END -->)"
replacement = f"\\1\n\n{new_changelog}\n\n\\3"

new_readme = re.sub(pattern, replacement, old_content, flags=re.DOTALL)

with open("README.md", "w") as f:
    f.write(new_readme)
