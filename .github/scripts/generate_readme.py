from google import genai
import subprocess
import os
import re

# =================================================================
# –í–∑–∞—î–º–æ–¥—ñ—è –∑ Gemini API –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, —è–∫ –≤–∏ —ñ –ø—Ä–æ—Å–∏–ª–∏
client = genai.Client()
# =================================================================

# --- –†–ï–§–ê–ö–¢–û–†–ò–ù–ì –õ–û–ì–Ü–ö–ò GIT ---

def get_sorted_tags():
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–µ–≥—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    (–≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ).
    """
    try:
        # –ö–æ–º–∞–Ω–¥–∞ git tag —Å–æ—Ä—Ç—É—î —Ç–µ–≥–∏ –∑–∞ –¥–∞—Ç–æ—é —ó—Ö —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        tags_raw = subprocess.check_output(
            ["git", "tag", "--sort=-creatordate"]
        ).decode().strip()
        return tags_raw.split('\n')
    except subprocess.CalledProcessError:
        # –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —Ç–µ–≥—ñ–≤ –Ω–µ–º–∞—î
        return []

def get_commits_between(old_tag, new_tag):
    """
    –û—Ç—Ä–∏–º—É—î –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º—ñ—Ç—ñ–≤ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–µ–≥–∞–º–∏.
    """
    if old_tag:
        # –î—ñ–∞–ø–∞–∑–æ–Ω –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —ñ –Ω–æ–≤–∏–º —Ç–µ–≥–æ–º
        command = ["git", "log", f"{old_tag}..{new_tag}", "--pretty=format:- %s"]
    else:
        # –Ø–∫—â–æ —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–≥–∞ –Ω–µ–º–∞—î (–ø–µ—Ä—à–∏–π —Ä–µ–ª—ñ–∑), –±–µ—Ä–µ–º–æ –≤—Å—ñ –∫–æ–º—ñ—Ç–∏ –¥–æ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞
        command = ["git", "log", new_tag, "--pretty=format:- %s"]
    
    try:
        return subprocess.check_output(command).decode().strip()
    except subprocess.CalledProcessError:
        return ""

# 1. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç–µ–≥–∏, –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–∞ —á–∞—Å–æ–º
all_tags = get_sorted_tags()

if not all_tags:
    print("Error: No tags found in the repository. Exiting.")
    exit(1) # –í–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ–º–∏–ª–∫–æ—é, –±–æ –Ω–µ–º–∞—î —á–æ–≥–æ –æ–±—Ä–æ–±–ª—è—Ç–∏

# 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–≥–∏
current_tag = all_tags[0]
previous_tag = all_tags[1] if len(all_tags) > 1 else ""

print(f"-> Detected current tag: {current_tag}")
print(f"-> Detected previous tag: {previous_tag or 'None (first release)'}")

# 3. –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º—ñ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞–¥—ñ–π–Ω—ñ —Ç–µ–≥–∏
commits = get_commits_between(previous_tag, current_tag)

# 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —è–∫—â–æ –∫–æ–º—ñ—Ç—ñ–≤ –Ω–µ–º–∞—î, –Ω–µ —Ç—É—Ä–±—É—î–º–æ API
if not commits:
    print("-> No new commits found between tags. README will not be updated.")
    exit(0) # –í–∏—Ö–æ–¥–∏–º–æ —É—Å–ø—ñ—à–Ω–æ, –±–æ —Ü–µ –æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞

print("\n--- Sending a list of commits to the API ---")
print(commits)
print("------------------------------------------\n")

# --- –ö–Ü–ù–ï–¶–¨ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–£ ---


# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
prompt = f"""
–ó–≥–µ–Ω–µ—Ä—É–π changelog —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–∏–∂—á–µ, –¥–ª—è —Ç–µ–≥–∞ {current_tag}.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É. –Ø–∫—â–æ —Ç–µ–≥ –Ω–µ –º–∞—î –∑–º—ñ–Ω, –ø—Ä–æ—Å—Ç–æ –≤–∫–∞–∂–∏, —â–æ –Ω–µ–º–∞—î –∑–º—ñ–Ω.
–ù–µ –≥–æ–≤–æ—Ä–∏ —â–æ—Å—å —Ç–∏–ø—É "–û—Å—å —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω", –ø—Ä–æ—Å—Ç–æ –¥–∞–π —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ, —è–∫–∏–π —è –≤–∫–∞–∑–∞–≤ –Ω–∏–∂—á–µ.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–∫–∞:

v.v.v - <–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ä–µ–ª—ñ–∑—É –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º.>
‚ú® –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ (Added)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –Ω–æ–≤–∏—Ö —Ñ—ñ—á>
‚ôªÔ∏è –ó–º—ñ–Ω–∏ (Changed)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –∑–º—ñ–Ω>
üêõ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è (Fixed)
<—Ç—É—Ç –ø–µ—Ä–µ–ª—ñ–∫ –±–∞–≥—Ñ—ñ–∫—Å—ñ–≤>
üßπ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏ (Housekeeping)
<–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –∑–º—ñ–Ω–∏, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–º—ñ—Ç—Ç—è —Ç–æ—â–æ>

–û—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º—ñ—Ç—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É:
{commits}
"""

# –í–∑–∞—î–º–æ–¥—ñ—è –∑ Gemini API –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
response = client.models.generate_content(
    model="gemini-2.0-flash", contents=prompt
)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è README.md –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
# (–¥–æ–¥–∞–Ω–æ –ª–∏—à–µ encoding –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ –∫–∏—Ä–∏–ª–∏—Ü–µ—é)
with open("README.md", "r", encoding="utf-8") as f:
    old_content = f.read()

new_changelog = response.text.strip()

# –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ changelog –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –º–∞—Ä–∫–µ—Ä–∞ (–∑–∞–º—ñ–Ω—é—î–º–æ –≤—Å—é —Å–µ–∫—Ü—ñ—é)
pattern = r"(<!-- CHANGELOG START -->)(.*?)(<!-- CHANGELOG END -->)"
# –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
full_new_content = f"## {current_tag}\n\n{new_changelog}"
# –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä–∏–π
replacement = f"\\1\n\n{full_new_content}\n\\2\\3"
# –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—è—Ç–∏ —Å—Ç–∞—Ä–∏–π –ª–æ–≥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
# replacement = f"\\1\n\n{full_new_content}\n\n\\3"

new_readme = re.sub(pattern, replacement, old_content, flags=re.DOTALL)

with open("README.md", "w", encoding="utf-8") as f:
    f.write(new_readme)

print("‚úÖ README.md has been successfully updated.")