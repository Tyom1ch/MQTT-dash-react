import MQTTService from '../services/MQTTService';

class MQTTCore {
  constructor() {
    this.topics = {}; // –ó–±–µ—Ä—ñ–≥–∞—î —Ç–æ–ø—ñ–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞ JSON
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—Ä–æ–∫–µ—Ä–∞
  async connect(host, username, password) {
    try {
      await MQTTService.connect(host, username, password);
    //   console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±—Ä–æ–∫–µ—Ä–∞');
    } catch (error) {
    //   console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—Ä–æ–∫–µ—Ä–∞:', error.message);
      throw error;
    }
  }

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞
  disconnect() {
    try {
      MQTTService.disconnect();
      console.log('‚úÖ –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error.message);
    }
  }

  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å—ñ —Ç–æ–ø—ñ–∫–∏
  subscribeToAllTopics() {
    try {
      MQTTService.subscribe('#', this.handleMessage.bind(this));
    //   console.log('‚úÖ –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ –≤—Å—ñ —Ç–æ–ø—ñ–∫–∏ (#)');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏:', error.message);
    }
  }

  // –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞ —Ç–æ–ø—ñ–∫—ñ–≤
  handleMessage(topic, message) {
    // console.log(`üì¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–æ–ø—ñ–∫–∞ ${topic}: ${message}`);
    this.updateTopicStructure(topic, message);
    // console.log((this.topics));
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–æ–ø—ñ–∫—ñ–≤
  updateTopicStructure(topic, message) {
    // console.log(topics);
    const parts = topic.split('/');
    let currentLevel = this.topics;

    parts.forEach((part, index) => {
      if (!currentLevel[part]) {
        currentLevel[part] = {}; // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ, —è–∫—â–æ —Ä—ñ–≤–µ–Ω—å –Ω–µ —ñ—Å–Ω—É—î
      }
      if (index === parts.length - 1) {
        currentLevel[part] = message; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –∫—ñ–Ω—Ü–µ–≤–æ–º—É —Ä—ñ–≤–Ω—ñ
      }
      currentLevel = currentLevel[part];
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ–≤–Ω–æ–≥–æ —Ç–æ–ø—ñ–∫–∞
  getState(topic) {
    const parts = topic.split('/');
    let currentLevel = this.topics;

    for (const part of parts) {
      if (!currentLevel[part]) {
        // console.warn(`‚ö†Ô∏è –¢–æ–ø—ñ–∫ "${topic}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        return null;
      }
      currentLevel = currentLevel[part];
    }

    return currentLevel; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —Å—Ç–∞–Ω
  }

  // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–ø—ñ–∫
  sendMessage(topic, message) {
    try {
      MQTTService.publish(topic, message);
      console.log(`üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø—ñ–∫ ${topic}: ${message}`);
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–æ–ø—ñ–∫ ${topic}:`, error.message);
    }
  }
}

export default new MQTTCore();
