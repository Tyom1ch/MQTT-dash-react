import mqtt from "mqtt";

class MQTTService {
  constructor() {
    this.client = null;
    this.isConnected = false;
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—Ä–æ–∫–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ)
  async connect(host, username, password) {
    const options = { username, password };
  
    return new Promise((resolve, reject) => {
      this.client = mqtt.connect(host, options);
  
      this.client.on("connect", () => {
        this.isConnected = true;
        resolve();
      });
  
      this.client.on("error", (err) => {
        this.client.end();
        this.isConnected = false;
        reject(err); // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ä–µ–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É –Ω–∞–≤–µ—Ä—Ö
      });
  
      this.client.on("close", () => {
        this.isConnected = false;
        reject(new Error("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")); // –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ª–æ–≤–ª–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç—Ç—è
      });
  
      this.client.on("offline", () => {
        this.isConnected = false;
        reject(new Error("üîå –ö–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ–π—à–æ–≤ –≤ offline-—Ä–µ–∂–∏–º")); // –í–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ offline
      });
    });
  }
  

  // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –±—Ä–æ–∫–µ—Ä–∞
  async disconnect() {
    if (!this.client) {
      throw new Error("MQTT –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
    }

    return new Promise((resolve) => {
      this.client.end(() => {
        this.isConnected = false;
        this.client = null;
        resolve();
      });
    });
  }

  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø—ñ–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  async subscribe(topic, callback) {
    console.log(`üîî –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø—ñ–∫: ${topic}`);
    if (!this.client) {
      throw new Error("MQTT –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
    }

    try {
      await new Promise((resolve, reject) => {
        this.client.subscribe(topic, (err) => {
          if (err) {
            reject(new Error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø—ñ–∫: ${topic}`));
          } else {
            resolve();
          }
        });
      });

      // –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      this.client.on("message", (receivedTopic, message) => {
        // console.log(`üì® MQTTService –æ—Ç—Ä–∏–º–∞–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${receivedTopic} => ${message.toString()}`);
        // –ü–µ—Ä–µ–¥–∞—î–º–æ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É callback
        callback(receivedTopic, message.toString());
      });
    } catch (error) {
      console.error(error.message);
    }
  }

  // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  async publish(topic, message) {
    if (!this.client) {
      throw new Error("MQTT –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ");
    }

    return new Promise((resolve, reject) => {
      this.client.publish(topic, message, (err) => {
        if (err) {
          reject(
            new Error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ —Ç–æ–ø—ñ–∫ ${topic}: ${err.message}`)
          );
        } else {
          resolve();
        }
      });
    });
  }
}

export default new MQTTService();
