import mqtt from 'mqtt';

class MQTTService {
  constructor() {
    this.client = null;
    this.isConnected = false;
  }

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—Ä–æ–∫–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ)
  async connect(host, username, password) {
    const options = {
      // port: 8080,
      username,
      password,
    };

    return new Promise((resolve, reject) => {
      this.client = mqtt.connect(host, options);

      this.client.on('connect', () => {
        this.isConnected = true;
        // console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MQTT –±—Ä–æ–∫–µ—Ä–∞');
        resolve();
      });

      this.client.on('error', (err) => {
        // console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ MQTT: ${err.message}`);
        this.client.end();
        reject(err);
      });

      this.client.on('close', () => {
        this.isConnected = false;
        // console.log('üîå –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ MQTT –±—Ä–æ–∫–µ—Ä–æ–º —Ä–æ–∑—ñ—Ä–≤–∞–Ω–æ');
      });
    });
  }

 // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø—ñ–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async subscribe(topic, callback) {
  console.log(`üîî –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø—ñ–∫: ${topic}`);
  if (!this.client) {
    throw new Error('MQTT –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
  }

  try {
    await new Promise((resolve, reject) => {
      this.client.subscribe(topic, (err) => {
        if (err) {
          reject(new Error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–æ–ø—ñ–∫: ${topic}`));
        } else {
          resolve();
        }
      });
    });

    // –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    this.client.on('message', (receivedTopic, message) => {
      // console.log(`üì® MQTTService –æ—Ç—Ä–∏–º–∞–ª–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${receivedTopic} => ${message.toString()}`);
      // –ü–µ—Ä–µ–¥–∞—î–º–æ –í–°–Ü –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É callback
      callback(receivedTopic, message.toString());
    });

  } catch (error) {
    console.error(error.message);
  }
}


  // –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
  async publish(topic, message) {
    if (!this.client) {
      throw new Error('MQTT –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    }

    return new Promise((resolve, reject) => {
      this.client.publish(topic, message, (err) => {
        if (err) {
          reject(new Error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ —Ç–æ–ø—ñ–∫ ${topic}: ${err.message}`));
        } else {
          resolve();
        }
      });
    });
  }
}

export default new MQTTService();
